#ifndef FASTQ_CONTROL_SAMPLER_H
#define FASTQ_CONTROL_SAMPLER_H

	////////////////////////////////////////////////////////////////////////
	//  STRUCTURES
	////////////////////////////////////////////////////////////////////////

	// Structure 
	typedef struct info T_info;
	struct info
	{
		char* name;
		int size_name;
		char* seq;
		int size_seq;
		T_info* next;
	};

	////////////////////////////////////////////////////////////////////////
	//  GLOBAL VARIABLES
	////////////////////////////////////////////////////////////////////////

	// If 1 = pairs will not be chosen in repeat region identified by lowercase characteres
	const int MASK_REPEAT = 1;
	// Size of the read to be generated
	const int SIZE_READ = 151;
	// Minimal size of fragments generated by fragmentation at the end of the experimental protocol
	const int SIZE_MIN_SONIC = 200;
	// Maximal size of fragments generated by fragmentation at the end of the experimental protocol
	const int SIZE_MAX_SONIC = 600;
	// Number of read pairs to be generated by reference sequence
	const int NB_PAIR_BY_REF = 1000;
	// Size of the random reference sequence generated during the first step of the program 
	const int SIZE_OF_RANDOM_REF = 100000;
	// Maximum number of tries to generate a valid read pair ie : sufficiant size and without 'N' in it
	const int MAX_TRY_VALID_PAIR = 100;
	// quality value to be included in the quality string. FYI : Illumina 1.8 = #$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJ
	const char QUALITY_SCORE [] =  "ABCDEFGHIJ"; // high quality scores
	// DNA bases
	const char DNA_BASES [] =  "ACTG";

	////////////////////////////////////////////////////////////////////////
	//  PROTOTYPES
	////////////////////////////////////////////////////////////////////////

	void usage (char*, int);
	T_info* create_ref_list (char**, int);
	void print_list (T_info*);
	void generate_fastq (T_info*);

	char complementary (char);
	char* generate_random_ref (int);
	void verify_ref_size (int, int);
	int nref (FILE*);
	T_info* create_info_cell(void);
	int evaluate_name_size (FILE*);
	int evaluate_seq_size (FILE*);
	char* output_name (FILE*, int);
	char* output_seq (FILE*, int);
	int select_read_pair (T_info* ptri, char**, char**);
	void generate_random_quality (char**, char**);

#endif /* FASTQ_CONTROL_SAMPLER_H */
